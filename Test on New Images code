# Function to test multiple images from a TFRecord file
def test_multiple_images_from_tfrecord(tfrecord_path, model):
    # Load the dataset from the TFRecord
    raw_dataset = tf.data.TFRecordDataset(tfrecord_path)

    # Define a parsing function
    def parse_test_function(example_proto):
        parsed_features = tf.io.parse_single_example(example_proto, feature_description)

        # Decode and preprocess the image
        image = tf.io.decode_jpeg(parsed_features["image/encoded"], channels=3)
        image = tf.image.resize(image, [224, 224])  # Resize to model input size

        # Convert SparseTensor label to dense and then process it
        label = tf.sparse.to_dense(parsed_features["image/object/class/label"])
        label = tf.reduce_any(tf.equal(label, 1))  # Label is 1 if any class label is 1
        label = tf.cast(label, tf.int32) # Cast to int32 for consistency

        return image, label

    # Parse the dataset
    test_dataset = raw_dataset.map(parse_test_function).batch(1)  # Batch size 1 for individual predictions

    # Iterate over the dataset and predict
    print("Predictions for test dataset:")
    for image, label in test_dataset:
        prediction = model.predict(image) > 0.5  # Predict whether it's "Degenerative Spine" or "Normal Spine"
        predicted_label = int(prediction[0][0])  # Convert boolean prediction to integer

        # Output prediction for the image
        label_text = "Degenerative Spine" if predicted_label == 1 else "Normal Spine"
        print(f"Predicted Label: {label_text}, Actual Label: {label.numpy()}")  # Now label has .numpy()

# Path to the test TFRecord file
test_tfrecord_path = "your_path"

# Call the function to test and display predictions
test_multiple_images_from_tfrecord(test_tfrecord_path, model)
